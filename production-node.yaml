version: '3.8'

services:
  # Production GoatChain Node
  goatchain-node:
    image: node:18-alpine
    container_name: goatchain-production
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ./:/app
      - ./data:/app/data
      - ./logs:/app/logs
      - ./backups:/app/backups
    ports:
      - "8545:8545"  # RPC
      - "8546:8546"  # WebSocket
      - "8080:8080"  # Health Check
      - "9090:9090"  # Metrics
    environment:
      - NODE_ENV=production
      - CHAIN_ID=999191917
      - NETWORK_NAME=GoatChain
      - MAX_PEERS=100
      - SYNC_MODE=full
      - CACHE_SIZE=4096
      - LOG_LEVEL=info
      - ENABLE_METRICS=true
      - ENABLE_HEALTH_CHECK=true
      - RATE_LIMIT_REQUESTS=1000
      - RATE_LIMIT_WINDOW=60
      - SSL_ENABLED=true
      - BACKUP_ENABLED=true
      - BACKUP_INTERVAL=3600
    command: ["node", "production-start.js"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.goatchain.rule=Host(`blockchain.goatfundr.com`)"
      - "traefik.http.routers.goatchain.tls.certresolver=letsencrypt"
      - "traefik.http.services.goatchain.loadbalancer.server.port=8545"

  # Production Database
  postgres:
    image: postgres:15-alpine
    container_name: goatchain-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=goatchain
      - POSTGRES_USER=goatchain
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U goatchain"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: goatchain-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru

  # Nginx Load Balancer & SSL Termination
  nginx:
    image: nginx:alpine
    container_name: goatchain-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - goatchain-node
    labels:
      - "traefik.enable=false"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: goatchain-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: goatchain-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: 